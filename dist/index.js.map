{"mappings":"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","sources":["src/index.ts","src/regex.ts"],"sourcesContent":["import type { PluginAPI } from 'tailwindcss/types/config'\nimport * as RegExp from './regex'\n\ndeclare type PluginOptions = {\n  extract: string | Array<string>\n  prefix: `-${string}`\n  mode: 'hex' | 'rgb'\n}\n\ndeclare type ColorObjectType = Record<string, string>\n\n/**\n * Extracts color variables based on the provided keys recursively.\n * @param colorObj - The object containing color definitions.\n * @param colorGroup - The current color group, used for nesting.\n * @param prefix - The prefix to use for CSS variables.\n * @param mode - The selected color mode to display the extracted colors.\n * @returns An object with CSS variables representing the extracted colors.\n */\nexport function extractColorVars(colorObj: ColorObjectType, colorGroup = '', prefix = '--tw', mode = 'hex') {\n  return Object.entries(colorObj).reduce((vars, [colorKey, value]) => {\n    const cssVariable =\n      colorKey === 'DEFAULT' ? `${prefix}${colorGroup}` : `${prefix}${colorGroup}-${colorKey}`\n\n    const newVars: ColorObjectType =\n      typeof value === 'string'\n        ? {\n            [cssVariable]: mode === 'hex' ? value : parseColor(value)?.color.join(', '),\n          }\n        : extractColorVars(value, `-${colorKey}`, prefix, mode)\n\n    return { ...vars, ...newVars }\n  }, {})\n}\n\n/**\n * Filters a color theme based on the specified keys.\n * @param keys - The keys to filter the color theme.\n * @param themeColors - The complete color theme object.\n * @returns A filtered color theme object containing only the specified keys.\n */\nexport function filterTheme(\n  keys: Array<keyof ColorObjectType>,\n  themeColors: ColorObjectType,\n): ColorObjectType {\n  return keys.reduce((filteredTheme, key) => {\n    if (themeColors[key]) {\n      filteredTheme[key] = themeColors[key]\n    }\n    return filteredTheme\n  }, {} as ColorObjectType)\n}\n\n/**\n * Parses a color string and extracts color components.\n * @param value - The color string to parse.\n * @param loose - If set to true, allows lenient parsing of color strings.\n * @returns An object with information about the parsed color, or null if parsing fails.\n */\nexport function parseColor(value: string, { loose = false } = {}) {\n  value = value.trim()\n\n  const hex = value\n    .replace(RegExp.SHORT_HEX, (_, r, g, b, a) => ['#', r, r, g, g, b, b, a ? a + a : ''].join(''))\n    .match(RegExp.HEX)\n\n  if (hex !== null) {\n    return {\n      mode: 'rgb',\n      color: [parseInt(hex[1]!, 16), parseInt(hex[2]!, 16), parseInt(hex[3]!, 16)].map((v) => v.toString()),\n      alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : undefined,\n    }\n  }\n\n  const match = value.match(RegExp.RGB) ?? value.match(RegExp.HSL)\n  if (match === null) return null\n\n  const color = [match[2], match[3], match[4]].filter(Boolean).map((v) => v!.toString())\n\n  if (color.length === 2 && color[0]!.startsWith('var('))\n    return { mode: match[1], color: [color[0]], alpha: color[1] }\n\n  if (!loose && color.length !== 3) return null\n\n  if (color.length < 3 && !color.some((part) => /^var\\(.*?\\)$/.test(part))) return null\n\n  return { mode: match[1], color, alpha: match[5]?.toString?.() }\n}\n\n/**\n * Tailwind CSS plugin that exposes Tailwind colors as custom CSS properties on the :root element.\n * @param options - The plugin configuration options.\n * @returns A function that can be used as a Tailwind CSS plugin.\n */\nmodule.exports = function ({ extract = 'all', prefix = '--tw', mode = 'hex' }: PluginOptions) {\n  return function ({ addBase, theme }: PluginAPI) {\n    if (extract === 'all') {\n      addBase({ ':root': extractColorVars(theme('colors'), '', prefix, mode) })\n    }\n    if (Array.isArray(extract)) {\n      addBase({\n        ':root': extractColorVars(filterTheme(extract, theme('colors')), '', prefix, mode),\n      })\n    }\n  }\n}\n","const HEX = /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i\nconst SHORT_HEX = /^#([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i\nconst VALUE = /(?:\\d+|\\d*\\.\\d+)%?/\nconst SEP = /(?:\\s*,\\s*|\\s+)/\nconst ALPHA_SEP = /\\s*[,/]\\s*/\nconst PROPERTY = /var\\(--(?:[^ )]*?)(?:,(?:[^ )]*?|var\\(--[^ )]*?\\)))?\\)/\n\nconst RGB = new RegExp(\n  `^(rgba?)\\\\(\\\\s*(${VALUE.source}|${PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${PROPERTY.source}))?\\\\s*\\\\)$`,\n)\nconst HSL = new RegExp(\n  `^(hsla?)\\\\(\\\\s*((?:${VALUE.source})(?:deg|rad|grad|turn)?|${PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${PROPERTY.source}))?\\\\s*\\\\)$`,\n)\n\nexport { HEX, SHORT_HEX, VALUE, SEP, ALPHA_SEP, PROPERTY, RGB, HSL }\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}