{"mappings":"ACSA,uBAA+B,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;AAErD;;;;;;;GAOG;AACH,iCAAiC,QAAQ,EAAE,eAAe,EAAE,UAAU,SAAK,EAAE,MAAM,SAAS,EAAE,IAAI,SAAQ,MAczG;AAED;;;;;GAKG;AACH,4BACE,IAAI,EAAE,KAAK,CAAC,MAAM,eAAe,CAAC,EAClC,WAAW,EAAE,eAAe,GAC3B,eAAe,CAOjB;AAED;;;;;GAKG;AACH,2BAA2B,KAAK,EAAE,MAAM,EAAE,EAAE,KAAa,EAAE;;CAAK;;;;SA4B/D","sources":["src/src/regex.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,"import type { PluginAPI } from 'tailwindcss/types/config'\nimport * as RegExp from './regex'\n\ndeclare type PluginOptions = {\n  extract: string | Array<string>\n  prefix: `-${string}`\n  mode: 'hex' | 'rgb'\n}\n\ndeclare type ColorObjectType = Record<string, string>\n\n/**\n * Extracts color variables based on the provided keys recursively.\n * @param colorObj - The object containing color definitions.\n * @param colorGroup - The current color group, used for nesting.\n * @param prefix - The prefix to use for CSS variables.\n * @param mode - The selected color mode to display the extracted colors.\n * @returns An object with CSS variables representing the extracted colors.\n */\nexport function extractColorVars(colorObj: ColorObjectType, colorGroup = '', prefix = '--tw', mode = 'hex') {\n  return Object.entries(colorObj).reduce((vars, [colorKey, value]) => {\n    const cssVariable =\n      colorKey === 'DEFAULT' ? `${prefix}${colorGroup}` : `${prefix}${colorGroup}-${colorKey}`\n\n    const newVars: ColorObjectType =\n      typeof value === 'string'\n        ? {\n            [cssVariable]: mode === 'hex' ? value : parseColor(value)?.color.join(', '),\n          }\n        : extractColorVars(value, `-${colorKey}`, prefix, mode)\n\n    return { ...vars, ...newVars }\n  }, {})\n}\n\n/**\n * Filters a color theme based on the specified keys.\n * @param keys - The keys to filter the color theme.\n * @param themeColors - The complete color theme object.\n * @returns A filtered color theme object containing only the specified keys.\n */\nexport function filterTheme(\n  keys: Array<keyof ColorObjectType>,\n  themeColors: ColorObjectType,\n): ColorObjectType {\n  return keys.reduce((filteredTheme, key) => {\n    if (themeColors[key]) {\n      filteredTheme[key] = themeColors[key]\n    }\n    return filteredTheme\n  }, {} as ColorObjectType)\n}\n\n/**\n * Parses a color string and extracts color components.\n * @param value - The color string to parse.\n * @param loose - If set to true, allows lenient parsing of color strings.\n * @returns An object with information about the parsed color, or null if parsing fails.\n */\nexport function parseColor(value: string, { loose = false } = {}) {\n  value = value.trim()\n\n  const hex = value\n    .replace(RegExp.SHORT_HEX, (_, r, g, b, a) => ['#', r, r, g, g, b, b, a ? a + a : ''].join(''))\n    .match(RegExp.HEX)\n\n  if (hex !== null) {\n    return {\n      mode: 'rgb',\n      color: [parseInt(hex[1]!, 16), parseInt(hex[2]!, 16), parseInt(hex[3]!, 16)].map((v) => v.toString()),\n      alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : undefined,\n    }\n  }\n\n  const match = value.match(RegExp.RGB) ?? value.match(RegExp.HSL)\n  if (match === null) return null\n\n  const color = [match[2], match[3], match[4]].filter(Boolean).map((v) => v!.toString())\n\n  if (color.length === 2 && color[0]!.startsWith('var('))\n    return { mode: match[1], color: [color[0]], alpha: color[1] }\n\n  if (!loose && color.length !== 3) return null\n\n  if (color.length < 3 && !color.some((part) => /^var\\(.*?\\)$/.test(part))) return null\n\n  return { mode: match[1], color, alpha: match[5]?.toString?.() }\n}\n\n/**\n * Tailwind CSS plugin that exposes Tailwind colors as custom CSS properties on the :root element.\n * @param options - The plugin configuration options.\n * @returns A function that can be used as a Tailwind CSS plugin.\n */\nmodule.exports = function ({ extract = 'all', prefix = '--tw', mode = 'hex' }: PluginOptions) {\n  return function ({ addBase, theme }: PluginAPI) {\n    if (extract === 'all') {\n      addBase({ ':root': extractColorVars(theme('colors'), '', prefix, mode) })\n    }\n    if (Array.isArray(extract)) {\n      addBase({\n        ':root': extractColorVars(filterTheme(extract, theme('colors')), '', prefix, mode),\n      })\n    }\n  }\n}\n"],"names":[],"version":3,"file":"index.d.ts.map","sourceRoot":"../"}